<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-14T07:32:13.235Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nuxt介绍</title>
    <link href="http://yoursite.com/2019/08/12/nuxt%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2019/08/12/nuxt%E4%BB%8B%E7%BB%8D/</id>
    <published>2019-08-12T07:24:43.000Z</published>
    <updated>2020-04-14T07:32:13.235Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1nuxtjs"><a class="markdownIt-Anchor" href="#1nuxtjs"></a> 1.Nuxt.js</h2><h3 id="11-简介"><a class="markdownIt-Anchor" href="#11-简介"></a> 1.1 简介</h3><p>Nuxt 是一个基于 Vue 生态的更高层的框架，为开发服务端渲染(SSR)的 Vue 应用提供了极其便利的开发体验。</p><p>Vue.js是开发SPA单页面应用的，传统的SPA应用是将bundle.js从服务端获取，然后在客户端解析并挂载到dom。</p><p>Nuxt这个框架是用Vue开发多页应用，并在服务端渲染。我们可以将组件渲染为服务器端的 HTML 字符串，将它们直接发送到浏览器，最后将这些静态标记&quot;激活&quot;为客户端上完全可交互的应用程序。</p><p>Nuxt适合做新闻、博客、电影、咨询这样的需要搜索引擎提供流量的项目。如果你要做到是移动端项目，就没有必要用nuxt这个框架了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Nuxt.js有如下特点：</span><br><span class="line">Vue 2 ： nuxt是基于Vue2开发的</span><br><span class="line">Vue Router  ： nuxt整合了路由功能，配置非常简单</span><br><span class="line">VueX  ： 支持vuex</span><br><span class="line">Vue Server Renderer  ： 支持服务端渲染</span><br><span class="line">Vue-meta  ： 支持meta标签配置</span><br></pre></td></tr></table></figure><h3 id="12-nuxt项目创建"><a class="markdownIt-Anchor" href="#12-nuxt项目创建"></a> 1.2 Nuxt项目创建</h3><p><a href="https://zh.nuxtjs.org/guide/installation#%E6%96%B0%E6%89%8B%E6%A8%A1%E6%9D%BF">https://zh.nuxtjs.org/guide/installation#新手模板</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建nuxt项目   https://www.npmjs.com/package/create-nuxt-app</span></span><br><span class="line">$ npx create-nuxt-app nuxt-learn</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.nuxt模式选择Universal</span></span><br><span class="line">   spa是单页，所以只有一个入口文件，不利于搜索引擎收录</span><br><span class="line">   Universal 通用app，服务器渲染的 Vue.js 应用程序也可以被认为是<span class="string">&quot;同构&quot;</span>或<span class="string">&quot;通用&quot;</span>，因为应用程序的大部分代码都可以在服务器和客户端上运行</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.注意不要选择pretty(会和eslint冲突)</span></span><br><span class="line">    我们都知道，如何与团队其他人高效地进行协作开发是多人团队的一个痛点。</span><br><span class="line">    每个人都有独立的编码习惯，虽然团队可以通过制定强制执行的规范来保持大家代码风格的尽量一致。</span><br><span class="line">    但是，在实际编码过程中，个人可能会不经意地继续使用着自己的代码风格，而等到发现不一致再解决又未免有点迟。</span><br><span class="line">    而ESLint正是为解决这类问题而生的。ESLint 由 JavaScript 红宝书 作者 Nicholas C. Zakas 编写， <span class="number">2013</span> 年发布第一个版本，t是一款当前应用十分广泛的JavaScript代码检查工具</span><br><span class="line">    </span><br><span class="line"><span class="comment">//4.npm run dev</span></span><br><span class="line">   访问  http:<span class="comment">//localhost:3000/</span></span><br></pre></td></tr></table></figure><p><img src="nuxt%E4%BB%8B%E7%BB%8D/1545786453223.png" alt="1545786453223" /></p><p><img src="nuxt%E4%BB%8B%E7%BB%8D/7.png" alt="7" /></p><h3 id="13-nuxt基本使用"><a class="markdownIt-Anchor" href="#13-nuxt基本使用"></a> 1.3 Nuxt基本使用</h3><h4 id="a-路由"><a class="markdownIt-Anchor" href="#a-路由"></a> a) 路由</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pages文件夹下面，文件名即路由</span></span><br><span class="line"></span><br><span class="line">#1.pages下新建search.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    这是search页面</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#2.index.vue使用路由</span><br><span class="line">&lt;nuxt-link to=<span class="string">&quot;/search&quot;</span>&gt;到search页面&lt;/nuxt-link&gt;</span><br></pre></td></tr></table></figure><h4 id="b-嵌套子模板"><a class="markdownIt-Anchor" href="#b-嵌套子模板"></a> b) 嵌套子模板</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#index.vue</span><br><span class="line"></span><br><span class="line">#1.template</span><br><span class="line">&lt;template&gt;</span><br><span class="line">      &lt;section <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">              &lt;logo/&gt;</span><br><span class="line">             &lt;/div&gt;</span><br><span class="line">      &lt;/section&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">#2. javascript</span><br><span class="line"><span class="keyword">import</span> Logo <span class="keyword">from</span> <span class="string">&#x27;~/components/Logo.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Logo</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="c-layouts布局文件"><a class="markdownIt-Anchor" href="#c-layouts布局文件"></a> c) layouts布局文件</h4><p>默认情况下所有的页面都会默认使用layouts下面default.vue这个布局文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#default.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;头部&lt;/h1&gt;</span><br><span class="line">    &lt;!--nuxt就相当于 router-view--&gt;</span><br><span class="line">    &lt;nuxt/&gt;                     </span><br><span class="line">    &lt;h1&gt;尾巴&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>​</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#自定义布局文件</span><br><span class="line">#1.layouts下新建一个user.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;用户页面头部&lt;/h1&gt;</span><br><span class="line">    &lt;nuxt/&gt;</span><br><span class="line">    &lt;h1&gt;用户页面底部&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=<span class="string">&quot;css&quot;</span> scoped&gt;</span><br><span class="line">  h1&#123;</span><br><span class="line">    color:green</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">#2.pages下的search.vue指定使用哪个布局文件</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    layout:<span class="string">&quot;user&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="d-全局的css文件"><a class="markdownIt-Anchor" href="#d-全局的css文件"></a> d) 全局的css文件</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#1.在assets下新建css/main.css</span><br><span class="line"></span><br><span class="line">#2.修改nuxt.config.css配置文件</span><br><span class="line">css: [</span><br><span class="line">    <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;~/assets/css/main.css&#x27;</span></span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">#3.重启服务</span><br></pre></td></tr></table></figure><h4 id="e-vuex的使用"><a class="markdownIt-Anchor" href="#e-vuex的使用"></a> e) vuex的使用</h4><p>在nuxt中使用vuex的时候无需new Vue.Store实例，nuxt会帮我们自动创建。默认情况下，会使用index.js这个store</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">#1.store/index.js</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> state = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">  list: [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>],</span><br><span class="line">  user:&#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  increment (state,text) &#123;</span><br><span class="line">    state.list.push(text);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> actions = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#2.store/city.js</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> state = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">  list: [<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  increment (state,text) &#123;</span><br><span class="line">    state.list.push(text);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#3.pages/city.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    Page is city</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li</span><br><span class="line">        v-<span class="keyword">for</span>=<span class="string">&quot;(item,idx) in $store.state.list&quot;</span></span><br><span class="line">        :key=<span class="string">&quot;idx&quot;</span>&gt; &#123;&#123; item &#125;&#125; </span><br><span class="line">       &lt;/li&gt;</span><br><span class="line"></span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">&quot;button&quot;</span></span><br><span class="line">        value=<span class="string">&quot;增加信息index&quot;</span></span><br><span class="line">        @click=<span class="string">&quot;addIndex&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">      &lt;li</span><br><span class="line">        v-<span class="keyword">for</span>=<span class="string">&quot;(item,idx) in $store.state.city.list&quot;</span></span><br><span class="line">        :key=<span class="string">&quot;idx&quot;</span>&gt; &#123;&#123; item &#125;&#125; </span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input</span><br><span class="line">      type=<span class="string">&quot;button&quot;</span></span><br><span class="line">      value=<span class="string">&quot;增加信息city&quot;</span></span><br><span class="line">      @click=<span class="string">&quot;addCity&quot;</span>&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        list:[]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      addIndex()&#123;</span><br><span class="line">        <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;increment&#x27;</span>, <span class="string">&quot;kk&quot;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      addCity()&#123;</span><br><span class="line">        <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;city/increment&#x27;</span>, <span class="string">&quot;jj&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="14-async和await"><a class="markdownIt-Anchor" href="#14-async和await"></a> 1.4 async和await</h3><p>async和await提供了一个很好的框架来编写易于读写的异步代码。有了async/await，我们很少需要写promise.then/catch</p><h4 id="141-async"><a class="markdownIt-Anchor" href="#141-async"></a> 1.4.1 async</h4><p>函数前面的<code>async</code>一词意味着一个简单的事情：这个函数总是返回一个promise，如果代码中有<code>return &lt;非promise&gt;</code>语句，JavaScript会自动把返回的这个value值包装成promise的resolved值。如果 async 函数没有返回值，它会返回 Promise.resolve(undefined)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面代码和下面代码等效</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//Promise.resolve方法返回一个promise的实例</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//放在一个函数前的async有两个作用：</span></span><br><span class="line"><span class="number">1.</span>使函数总是返回一个promise</span><br><span class="line"><span class="number">2.</span>允许在这其中使用<span class="keyword">await</span></span><br></pre></td></tr></table></figure><h4 id="142-await"><a class="markdownIt-Anchor" href="#142-await"></a> 1.4.2 await</h4><p>关键词   <code>await</code>可以让JavaScript进行等待，直到一个promise执行并返回它的结果，JavaScript才会继续往下执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> resolve(<span class="string">&#x27;done!&#x27;</span>), <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> promise <span class="comment">// 直到promise返回一个resolve值（*）</span></span><br><span class="line">    alert(result) <span class="comment">// &#x27;done!&#x27; </span></span><br><span class="line">&#125;</span><br><span class="line">f()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//promise前面的await关键字能够使JavaScript等待，直到promise处理结束。然后：</span></span><br><span class="line"><span class="number">1.</span>如果它是一个错误，异常就产生了，就像在那个地方调用了<span class="keyword">throw</span> error一样。可以使用<span class="keyword">try</span> <span class="keyword">catch</span>处理异常</span><br><span class="line"><span class="number">2.</span>否则它会返回一个结果，我们可以将它分配给一个值</span><br></pre></td></tr></table></figure><h3 id="15-spaseossr"><a class="markdownIt-Anchor" href="#15-spaseossr"></a> 1.5 SPA\SEO\SSR</h3><h4 id="151-spa单页面应用"><a class="markdownIt-Anchor" href="#151-spa单页面应用"></a> 1.5.1 SPA:单页面应用</h4><p>SPA 时代，主要是在客户端端使用了<code>history</code>或<code>hash</code>（主要是为了低版本浏览器的兼容）API，在首次请求经服务端路由输出整个应用程序后，接下来的路由都由前端掌控了，前端通过路由作为中心枢纽控制一系列页面（组件）的渲染(DOM的生成)加载和数据交互。</p><blockquote><p>优点</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">页面之间的切换非常快</span><br><span class="line">一定程度减少了后端服务器的压力</span><br><span class="line">后端程序只需要提供api，不需要客户端到底是web端还是手机等</span><br></pre></td></tr></table></figure><blockquote><p>缺点</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">首屏打开速度很慢，因为用户首次加载需要先下载SPA框架及应用程序的代码，然后在客户端渲染页面。</span><br><span class="line">不利于SEO搜索引擎优化</span><br></pre></td></tr></table></figure><h4 id="152-seo搜索引擎优化"><a class="markdownIt-Anchor" href="#152-seo搜索引擎优化"></a> 1.5.2 SEO:搜索引擎优化</h4><p>SEO是一种通过了解搜索引擎的运作规则（如何抓取网站页面，如何索引以及如何根据特定的关键字展现搜索结果排序等）来调整网站，以提高该网站在搜索引擎中某些关键词的搜索结果排名。</p><p>我们之前说SPA单页面应用，通过AJAX获取数据，这就难保证我们的页面能被搜索引擎正常收到，并且有一些搜索引擎不支持执行js和通过ajax获取数据，那就更不用提SEO了。为了解决这个问题，SSR登场了</p><h4 id="153-ssr服务器端渲染"><a class="markdownIt-Anchor" href="#153-ssr服务器端渲染"></a> 1.5.3 SSR:服务器端渲染</h4><p>为了解决SPA不支持SEO的问题，我们也可以将同一个组件渲染为服务器端的 HTML 字符串，将它们直接发送到浏览器，但是这样的HTML页面还不具备交互能力，所以还需要与SPA框架配合，在浏览器上“混合”成可交互的应用程序。</p><p>基本流程是：</p><blockquote><p>在浏览器第一次访问某个 URI 资源的时候（首屏），Web 服务器根据路由拿到对应数据渲染并输出，且输出的数据中包含两部分：</p><ul><li>路由页对应的页面及已渲染好的数据</li><li>完整的SPA程序代码</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在客户端首屏渲染完成之后，此时我们看到的其实已经是一个和之前的 SPA 相差无几的应用程序了，接下来我们进行的任何操作都只是客户端的应用进行交互，页面&#x2F;组件由Web端渲染，路由也由浏览器控制，用户只需要和当前浏览器内的应用打交道就可以了。</span><br></pre></td></tr></table></figure><blockquote><p>SSR优点</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">更好的 SEO，由于搜索引擎爬虫抓取工具可以直接查看完全渲染的页面。</span><br><span class="line">更快的内容到达时间(time-to-content)，不用等待所有的JS都下载完成，浏览器便能显示比较完整的页面了</span><br></pre></td></tr></table></figure><blockquote><p>SSR缺点</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">占用更多的cpu和内存资源</span><br><span class="line">一些常用的浏览器的api可能无法正常使用，比如window，document，alert等，如果使用的话需要对运行环境加以判断</span><br><span class="line">开发调试会有一些麻烦，因为涉及到了浏览器及服务器，对于SPA的一些组件的生命周期的管理会变得复杂</span><br></pre></td></tr></table></figure><h4 id="154-nuxt对ssr支持"><a class="markdownIt-Anchor" href="#154-nuxt对ssr支持"></a> 1.5.4 Nuxt对SSR支持</h4><p>从头搭建一个服务端渲染的应用是相当复杂的。幸运的是，我们有一个优秀的社区项目 <a href="https://nuxtjs.org/">Nuxt.js</a> 让这一切变得非常简单。Nuxt 是一个基于 Vue 生态的更高层的框架，为开发服务端渲染的 Vue 应用提供了极其便利的开发体验。</p><p>Nuxt.js 是使用 Webpack 和 Node.js 进行封装的基于Vue的SSR框架，预设了利用Vue.js开发<strong>服务端渲染</strong>的应用所需要的各种配置，使用它你可以不需要自己搭建一套 SSR 程序，而是通过其约定好的文件结构和API就可以实现一个首屏渲染的 Web 应用。</p><p>Nuxt.js 主要关注的是应用的 UI渲染。</p><p><a href="https://juejin.im/post/58ff960ba22b9d0065b722cd">https://juejin.im/post/58ff960ba22b9d0065b722cd</a></p><h3 id="16-数据预取"><a class="markdownIt-Anchor" href="#16-数据预取"></a> 1.6 数据预取</h3><h4 id="161-准备服务器接口"><a class="markdownIt-Anchor" href="#161-准备服务器接口"></a> 1.6.1 准备服务器接口</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#1.server/interface/city.js</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> router = express.Router()</span><br><span class="line">router.get(<span class="string">&#x27;/info&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> res.status(<span class="number">200</span>).json([<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;天津&#x27;</span>])</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br><span class="line"></span><br><span class="line">#2.server/index.js</span><br><span class="line"><span class="keyword">const</span> cityInterface = <span class="built_in">require</span>(<span class="string">&quot;./interface/city&quot;</span>)</span><br><span class="line"><span class="comment">//在app.use(nuxt.render)上面添加app.use(&quot;/city&quot;,cityInterface)</span></span><br><span class="line">app.use(<span class="string">&quot;/city&quot;</span>,cityInterface);</span><br><span class="line">app.use(nuxt.render)</span><br><span class="line"></span><br><span class="line">#.重启服务</span><br><span class="line">  localhost:<span class="number">3000</span>/city/info  测试接口</span><br></pre></td></tr></table></figure><h4 id="162-不使用数据预取"><a class="markdownIt-Anchor" href="#162-不使用数据预取"></a> 1.6.2 不使用数据预取</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#1.客户端pages下新建city.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    Page is city</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li</span><br><span class="line">        v-<span class="keyword">for</span>=<span class="string">&quot;(item,idx) in list&quot;</span></span><br><span class="line">        :key=<span class="string">&quot;idx&quot;</span>&gt; &#123;&#123; item &#125;&#125; &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        list:[]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//async表示方法返回一个Promise</span></span><br><span class="line">    <span class="comment">//await 同步等待</span></span><br><span class="line">    <span class="keyword">async</span> mounted()&#123;</span><br><span class="line">      <span class="keyword">let</span> &#123;status,data&#125; = <span class="keyword">await</span> axios.get(<span class="string">&quot;/city/info&quot;</span>);</span><br><span class="line">      <span class="built_in">this</span>.list = data;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.list);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="163-nuxtjs工作流"><a class="markdownIt-Anchor" href="#163-nuxtjs工作流"></a> 1.6.3 Nuxt.js工作流</h4><p><img src="nuxt%E4%BB%8B%E7%BB%8D/1546049173524.png" alt="1546049173524" /></p><blockquote><p>nuxtServerInit：如果在状态树(store)中指定了 <code>nuxtServerInit</code> 方法，Nuxt.js 调用它的时候会将页面的上下文对象作为第2个参数传给它（仅在服务端调用）。当我们想将服务端的一些数据传到客户端时，这个方法是非常好用的</p><p>middleware：中间件允许您定义一个自定义函数运行在一个页面或一组页面渲染之前，服务端首屏渲染和路由跳转前均执行对应中间件。可以用作页面跳转时验证用户信息操作(登陆拦截)。</p><p>asyncData会在组件加载前（限于页面组件）调用，可以在<strong>服务端首屏渲染或者在路由跳转时执行</strong>，专门用来请求数据，Nuxt.js 会将 <code>asyncData</code> 返回的数据融合组件 <code>data</code> 方法返回的数据一并返回给当前组件。asyncData应该是用于影响SEO的内容，也就是需要让爬虫读取的内容。</p></blockquote><h4 id="164-服务端数据预取"><a class="markdownIt-Anchor" href="#164-服务端数据预取"></a> 1.6.4 服务端数据预取</h4><h5 id="a-nuxtserverinit"><a class="markdownIt-Anchor" href="#a-nuxtserverinit"></a> a)  nuxtServerInit</h5><p>nuxtServerInit可以将服务端的数据通过vuex同步到客户端，该方法仅会在服务端首屏渲染时执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#store/index.js</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> state = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">  list: [],</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  setlist (state,text) &#123;</span><br><span class="line">    text.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">      state.list.push(item)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">//将菜单信息写入到vuex实例中</span></span><br><span class="line">  <span class="keyword">async</span> nuxtServerInit (&#123; commit &#125;, &#123; req ,app &#125;) &#123;</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123;status, data&#125; = <span class="keyword">await</span> app.$axios.get(<span class="string">&quot;/city/info&quot;</span>);</span><br><span class="line">      commit(<span class="string">&#x27;setlist&#x27;</span>, data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#2.pages/city.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    Page is city</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li</span><br><span class="line">        v-<span class="keyword">for</span>=<span class="string">&quot;(item,idx) in $store.state.list&quot;</span></span><br><span class="line">        :key=<span class="string">&quot;idx&quot;</span>&gt; &#123;&#123; item &#125;&#125; &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h5 id="b-asyncdata和fetch方法"><a class="markdownIt-Anchor" href="#b-asyncdata和fetch方法"></a> b) asyncData和fetch方法</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用asyncData进行ssr渲染</span></span><br><span class="line"><span class="keyword">async</span> asyncData()&#123;</span><br><span class="line">    <span class="comment">//给data取别名，请求网址写全，因为在刷新浏览器的时候需要全路径请求服务器</span></span><br><span class="line">    <span class="keyword">let</span> &#123;status,<span class="attr">data</span>:list&#125; = <span class="keyword">await</span> axios.get(<span class="string">&quot;http://127.0.0.1:3000/city/info&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(status == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="comment">//这边不能使用this.list = list,因为获取不到this</span></span><br><span class="line">        <span class="comment">//通过return给页面返回数据</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            list</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> fetch (&#123; store, params &#125;)&#123;</span><br><span class="line">      <span class="comment">//当页面加载时触发可以执行请求来触发action来修改state</span></span><br><span class="line">      <span class="comment">//不可以return数据给页面</span></span><br><span class="line">      <span class="comment">//页面可以从this.$store中获取action修改的state</span></span><br><span class="line">      <span class="keyword">let</span> &#123;status,<span class="attr">data</span>:list&#125; = <span class="keyword">await</span> axios.get(<span class="string">&quot;http://127.0.0.1:3000/city/info&quot;</span>);</span><br><span class="line">      store.commit(<span class="string">&#x27;setlist&#x27;</span>, list)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#注意点：asyncData 和 fetch都只能够在页面组件中使用，如果想要在页面组件的子组件中使用ssr，可以使用nuxtServerInit</span><br><span class="line">#注意点：由于 asyncData方法是在组件初始化前被调用的，所以在方法内是没有办法通过this来引用组件的实例。</span><br><span class="line">#注意点：当用户请求页面时候服务端会先使用SSR来生成对应的页面文档结构，而在用户切换路由则是使用了SPA的模式。这意味着如果用户刷新页面，asyncData方法会在服务端执行；如果用户通过nuxt-link路由导航到当前页面，asyncData会在客户端执行</span><br></pre></td></tr></table></figure><blockquote><hr /></blockquote><h4 id="165-客户端数据预取"><a class="markdownIt-Anchor" href="#165-客户端数据预取"></a> 1.6.5 客户端数据预取</h4><p>当asyncData方法是由路由跳转触发的时候，则使用客户端数据预取，asyncData方法会在客户端执行。可以通过控制台打印来查看是在浏览器执行还是在node执行就可以验证了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//https://zh.nuxtjs.org/api/#asyncdata-%E6%96%B9%E6%B3%95</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> asyncData(context)&#123;</span><br><span class="line">    <span class="comment">//给data取别名，请求网址写全</span></span><br><span class="line">    <span class="keyword">let</span> &#123;status,<span class="attr">data</span>:list&#125; = <span class="keyword">await</span> axios.get(<span class="string">&quot;http://127.0.0.1:3000/city/info&quot;</span>);</span><br><span class="line">    <span class="comment">//如果是客户端执行，则可以使用window对象</span></span><br><span class="line">    <span class="comment">//如果是服务端执行，则没有window对象</span></span><br><span class="line">    <span class="keyword">if</span>(process.client)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">window</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(status == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="comment">//这边不能使用this.list = list,因为获取不到this</span></span><br><span class="line">        <span class="comment">//通过return给页面返回数据</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            list</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="17-ssr原理"><a class="markdownIt-Anchor" href="#17-ssr原理"></a> 1.7 SSR原理</h3><p><img src="nuxt%E4%BB%8B%E7%BB%8D/92672015b4914784ae5a800c4a655e25.jpeg" alt="img" /></p><p><strong>官方文档</strong>:<a href="https://ssr.vuejs.org/zh/">https://ssr.vuejs.org/zh/</a></p><p>如上图所示：webpack将 Source 打包出两个bundle文件。</p><p>服务端渲染：Server Bundle用于服务端渲染，主要是获取异步数据，同步到组件中，并将组件渲染成HTML返回到前端，但是<strong>vue-ssr不能绑定javascript事件</strong>，也就是说服务器端使用vue-ssr渲染出来的返回到浏览器的也只能是HTML+CSS。</p><p>客户端渲染：Client Bundle 用于客户端渲染，之前说过服务器不能增加事件，那只能前端增加。所以我们看到SSR渲染的网页源码中有<code>window.__NUXT__=...</code>代码，这是后端和前端在使用vuex共享数据。后端从vuex里面取到数据之后渲染成真正的HTML和css返回。客户端也是从vuex里面取到数据，客户端的渲染主要做2件事：</p><blockquote><p>1.拿到数据，使用virtual-dom进行预渲染，然后和服务端渲染出来的进行比对，比对两边渲染的内容是不是一致的</p><p>2.对DOM元素的事件进行绑定，也就是回答的问题，事件在这块进行的处理</p></blockquote><h3 id=""><a class="markdownIt-Anchor" href="#"></a> </h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1nuxtjs&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1nuxtjs&quot;&gt;&lt;/a&gt; 1.Nuxt.js&lt;/h2&gt;
&lt;h3 id=&quot;11-简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#11-简介&quot;&gt;</summary>
      
    
    
    
    <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>vue样式穿透</title>
    <link href="http://yoursite.com/2019/05/02/vue%E6%A0%B7%E5%BC%8F%E7%A9%BF%E9%80%8F/"/>
    <id>http://yoursite.com/2019/05/02/vue%E6%A0%B7%E5%BC%8F%E7%A9%BF%E9%80%8F/</id>
    <published>2019-05-02T04:41:06.000Z</published>
    <updated>2020-03-29T04:47:01.236Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1什么是scoped"><a class="markdownIt-Anchor" href="#1什么是scoped"></a> 1.什么是scoped</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在Vue文件中的style标签上有一个特殊的属性，scoped。当一个style标签拥有scoped属性时候，它的css样式只能用于当前的Vue组件，可以使组件的样式不相互污染。如果一个项目的所有style标签都加上了scoped属性，相当于实现了样式的模块化。</span><br></pre></td></tr></table></figure><h2 id="2scoped的实现原理"><a class="markdownIt-Anchor" href="#2scoped的实现原理"></a> 2.scoped的实现原理</h2><p>Vue中的scoped属性的效果主要是通过PostCss实现的。以下是转译前的代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped lang&#x3D;&quot;less&quot;&gt;</span><br><span class="line">    .example&#123;</span><br><span class="line">        color:red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;example&quot;&gt;scoped测试案例&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>转译后:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.example[data-v-5558831a] &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;example&quot; data-v-5558831a&gt;scoped测试案例&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>既:PostCSS给一个组件中的所有dom添加了一个独一无二的动态属性，给css选择器额外添加一个对应的属性选择器，来选择组件中的dom,这种做法使得样式只作用于含有该属性的dom元素(组件内部的dom)。</p><blockquote><p>总结：scoped的渲染规则：</p></blockquote><ol><li>给HTML的dom节点添加一个不重复的data属性(例如: data-v-5558831a)来唯一标识这个dom 元素</li><li>在每句css选择器的末尾(编译后生成的css语句)加一个当前组件的data属性选择器(例如：[data-v-5558831a])来私有化样式</li></ol><h2 id="3scoped穿透"><a class="markdownIt-Anchor" href="#3scoped穿透"></a> 3.scoped穿透</h2><p>scoped看起来很好用，当时在Vue项目中，当我们引入第三方组件库时(如使用vue-awesome-swiper实现移动端轮播)，需要在局部组件中修改第三方组件库的样式，而又不想去除scoped属性造成组件之间的样式覆盖。这时我们可以通过特殊的方式穿透scoped。</p><blockquote><p>stylus的样式穿透 使用&gt;&gt;&gt;</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> 外层 &gt;&gt;&gt; 第三方组件 </span><br><span class="line">     样式</span><br><span class="line">     </span><br><span class="line">.wrapper &gt;&gt;&gt; .swiper-pagination-bullet-active</span><br><span class="line"> background: #fff</span><br></pre></td></tr></table></figure><blockquote><p>sass和less的样式穿透 使用/deep/</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">外层 &#x2F;deep&#x2F; 第三方组件 &#123;</span><br><span class="line">    样式</span><br><span class="line">&#125;</span><br><span class="line">.wrapper &#x2F;deep&#x2F; .swiper-pagination-bullet-active&#123;</span><br><span class="line">  background: #fff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3在组件中修改第三方组件库样式的其它方法"><a class="markdownIt-Anchor" href="#3在组件中修改第三方组件库样式的其它方法"></a> 3.在组件中修改第三方组件库样式的其它方法</h2><p>上面我们介绍了在使用scoped 属性时，通过scopd穿透的方式修改引入第三方组件库样式的方法，下面我们介绍其它方式来修改引入第三方组件库的样式</p><blockquote><p>在vue组件中不使用scoped属性</p></blockquote><hr /><blockquote><p>在vue组建中使用两个style标签，一个加上scoped属性，一个不加scoped属性，把需要覆盖的css样式写在不加scoped属性的style标签里</p></blockquote><hr /><blockquote><p>建立一个reset.css(基础全局样式)文件，里面写覆盖的css样式，在入口文件main.js 中引入</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1什么是scoped&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1什么是scoped&quot;&gt;&lt;/a&gt; 1.什么是scoped&lt;/h2&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla</summary>
      
    
    
    
    <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>vue-cli的使用</title>
    <link href="http://yoursite.com/2019/03/29/vue-cli%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/03/29/vue-cli%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2019-03-29T05:36:06.000Z</published>
    <updated>2020-03-29T05:48:14.641Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1vue-cli使用"><a class="markdownIt-Anchor" href="#1vue-cli使用"></a> 1.vue-cli使用</h2><p>vue-cli是vue官网提供的一个脚手架，这个构建工具大大降低了webpack的使用难度，支持热更新，有<strong>webpack-dev-server</strong>的支持，相当于启动了一个请求服务器，给你搭建了一个测试环境，只关注开发就OK</p><h3 id="11-安装vue-cli创建项目"><a class="markdownIt-Anchor" href="#11-安装vue-cli创建项目"></a> 1.1 安装vue-cli创建项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.npm install -g @vue&#x2F;cli@3.9.1</span><br><span class="line">2.将配置环境变量  C:\dev\nodejs</span><br><span class="line">3.vue create project-name</span><br></pre></td></tr></table></figure><p><img src="vue-cli%E7%9A%84%E4%BD%BF%E7%94%A8/1548217691062.png" alt="1548217691062" /></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看最终生效的 webpack 配置信息</span></span><br><span class="line">vue inspect &gt; output.js</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置文件参考文档</span></span><br><span class="line">https:<span class="comment">//cli.vuejs.org/zh/config/#devserver-proxy</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//运行App</span></span><br><span class="line">npm run serve</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译App</span></span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><p><img src="vue-cli%E7%9A%84%E4%BD%BF%E7%94%A8/1548290537572.png" alt="1548290537572" /></p><h3 id="12-windows32位-npm装不上vuecli的问题"><a class="markdownIt-Anchor" href="#12-windows32位-npm装不上vuecli的问题"></a> 1.2 windows(32位) npm装不上vue/cli的问题</h3><p><img src="vue-cli%E7%9A%84%E4%BD%BF%E7%94%A8/1562661036910.png" alt="1562661036910" /></p><p><img src="vue-cli%E7%9A%84%E4%BD%BF%E7%94%A8/1562661053769.png" alt="1562661053769" /></p><p><img src="vue-cli%E7%9A%84%E4%BD%BF%E7%94%A8/1562661089819.png" alt="1562661089819" /></p><h3 id="13-vueconfigjs配置"><a class="markdownIt-Anchor" href="#13-vueconfigjs配置"></a> 1.3 vue.config.js配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//官网配置： https://cli.vuejs.org/zh/config/#filenamehashing</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> debug = process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//部署应用包时的基本URL，如果是生产环境，部署到 /cli-study/dist 路径；如果是开发环境，部署到根路径</span></span><br><span class="line">  publicPath: !debug</span><br><span class="line">      ? <span class="string">&#x27;/cli-study/dist&#x27;</span></span><br><span class="line">      : <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  <span class="comment">//输出文件路径</span></span><br><span class="line">  outputDir: <span class="string">&#x27;dist&#x27;</span>,</span><br><span class="line">  <span class="comment">//放置生成的静态资源 (js、css、img、fonts) 的 (相对于 outputDir 的) 目录。</span></span><br><span class="line">  assetsDir: <span class="string">&#x27;static&#x27;</span>,</span><br><span class="line">  <span class="comment">//默认情况下，生成的静态资源在它们的文件名中包含了 hash 以便更好的控制缓存</span></span><br><span class="line">  filenameHashing: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// eslint-loader 是否在保存的时候检查</span></span><br><span class="line">  lintOnSave: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 是否使用包含运行时编译器的Vue构建版本，设置为 true 后你就可以在 Vue 组件中使用 template 选项了，但是这会让你的应用额外增加 10kb 左右。</span></span><br><span class="line">  runtimeCompiler: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 默认情况下 babel-loader 会忽略所有 node_modules 中的文件。如果你想要通过 Babel 显式转译一个依赖，可以在这个选项中列出来。</span></span><br><span class="line">  transpileDependencies: [],</span><br><span class="line">  <span class="comment">// 生产环境不需要sourceMap</span></span><br><span class="line">  productionSourceMap: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 官网：https://cli.vuejs.org/zh/guide/webpack.html#%E7%AE%80%E5%8D%95%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F</span></span><br><span class="line">  <span class="comment">// 更多配置参考：https://www.jb51.net/article/150844.htm</span></span><br><span class="line">  configureWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(config, &#123; <span class="comment">// 开发生产共同配置</span></span><br><span class="line">      resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">          <span class="string">&#x27;@&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;./src&#x27;</span>),</span><br><span class="line">          <span class="string">&#x27;vue$&#x27;</span>: <span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// webpack的链式操作，允许对内部的 webpack 配置进行更细粒度的修改</span></span><br><span class="line">  <span class="comment">// 参考： https://cli.vuejs.org/zh/guide/webpack.html#%E9%93%BE%E5%BC%8F%E6%93%8D%E4%BD%9C-%E9%AB%98%E7%BA%A7</span></span><br><span class="line">  chainWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">      <span class="comment">// 本地开发配置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 生产开发配置</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// css的相关配置</span></span><br><span class="line">  css: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//所有 webpack-dev-server 的选项都支持</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    host: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    port: <span class="number">3000</span>,</span><br><span class="line">    https: <span class="literal">false</span>,</span><br><span class="line">    hotOnly: <span class="literal">false</span>,</span><br><span class="line">    proxy: <span class="literal">null</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 第三方插件配置</span></span><br><span class="line">  pluginOptions: &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="14-vue-cli搭建项目"><a class="markdownIt-Anchor" href="#14-vue-cli搭建项目"></a> 1.4 vue-cli搭建项目</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create project_name</span><br></pre></td></tr></table></figure><h3 id="15-eslint格式化vue文件"><a class="markdownIt-Anchor" href="#15-eslint格式化vue文件"></a> 1.5 Eslint格式化.vue文件</h3><p>ESLint是一个用来识别 ECMAScript 并且按照规则给出报告的代码检测工具，使用它可以避免低级错误和统一代码的风格。</p><p>你可能有疑问，在.vue 文件中你怎么检验你的代码，因为它不是 JavaScript。我们假设你使用 <a href="https://eslint.org/">ESLint</a> (如果你没有使用话，你应该去使用！)。</p><p>你还需要官方的 <a href="https://github.com/vuejs/eslint-plugin-vue">eslint-plugin-vue</a>，它支持同时检查你.vue文件中的模板和脚本。</p><p><a href="https://vue-loader-v14.vuejs.org/zh-cn/workflow/linting.html">https://vue-loader-v14.vuejs.org/zh-cn/workflow/linting.html</a></p><h4 id="a-eslint配置rules规则"><a class="markdownIt-Anchor" href="#a-eslint配置rules规则"></a> a) eslint配置(rules规则)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭必须使用单引号</span></span><br><span class="line"><span class="string">&quot;quotes&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;single&quot;</span>],</span><br><span class="line"><span class="comment">// 允许多余的换行</span></span><br><span class="line"><span class="string">&quot;no-multi-spaces&quot;</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;no-console&#x27;</span>: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;error&#x27;</span> : <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;no-debugger&#x27;</span>: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;error&#x27;</span> : <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;prefer-promise-reject-errors&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;space-unary-ops&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;no-unused-expressions&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;no-useless-return&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;standard/no-callback-literal&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;import/first&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;import/export&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;no-mixed-operators&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;no-use-before-define&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不允许使用分号</span></span><br><span class="line"><span class="string">&#x27;semi&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许使用==</span></span><br><span class="line"><span class="string">&#x27;eqeqeq&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缩进使用不做限制</span></span><br><span class="line"><span class="string">&#x27;indent&#x27;</span>: <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许使用tab</span></span><br><span class="line"><span class="string">&#x27;no-tabs&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数圆括号之前没有空格</span></span><br><span class="line"><span class="string">&#x27;space-before-function-paren&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不要求块内空格填充格式</span></span><br><span class="line"><span class="string">&#x27;padded-blocks&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不限制变量一起声明</span></span><br><span class="line"><span class="string">&#x27;one-var&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件语句中复制操作符需要用圆括号括起来</span></span><br><span class="line"><span class="string">&#x27;no-cond-assign&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;except-parens&#x27;</span>],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许使用条件表达式使用常量</span></span><br><span class="line"><span class="string">&#x27;no-constant-condition&#x27;</span>: <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单行可忽略大括号，多行不可忽略</span></span><br><span class="line"><span class="string">&#x27;curly&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;multi-line&#x27;</span>],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不允许使用var变量</span></span><br><span class="line"><span class="string">&#x27;no-var&#x27;</span>: <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不允许出现多个空格</span></span><br><span class="line"><span class="string">&#x27;no-multi-spaces&#x27;</span>: [<span class="string">&#x27;error&#x27;</span>, &#123; <span class="attr">ignoreEOLComments</span>: <span class="literal">true</span> &#125;],</span><br><span class="line"><span class="string">&#x27;camelcase&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象字面量的键值空格风格</span></span><br><span class="line"><span class="string">&#x27;key-spacing&#x27;</span>: <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// if语句包含一个return语句， else就多余</span></span><br><span class="line"><span class="string">&#x27;no-else-return&#x27;</span>: <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建议将经常出现的数字提取为变量</span></span><br><span class="line"><span class="string">&#x27;no-magic-numbers&#x27;</span>: [<span class="number">0</span>, &#123; <span class="attr">ignoreArrayIndexes</span>: <span class="literal">true</span> &#125;],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不允许重复声明变量</span></span><br><span class="line"><span class="string">&#x27;no-redeclare&#x27;</span>: [<span class="number">2</span>, &#123; <span class="attr">builtinGlobals</span>: <span class="literal">true</span> &#125;],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 立即执行函数风格</span></span><br><span class="line"><span class="string">&#x27;wrap-iife&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;inside&#x27;</span>],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不允许圆括号中出现空格</span></span><br><span class="line"><span class="string">&#x27;space-in-parens&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保运算符周围有空格</span></span><br><span class="line"><span class="string">&#x27;space-infix-ops&#x27;</span>: <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制点号与属性同一行</span></span><br><span class="line"><span class="string">&#x27;dot-location&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;property&#x27;</span>],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制单行代码使用空格</span></span><br><span class="line"><span class="string">&#x27;block-spacing&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;always&#x27;</span>],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 约束for-in使用hasOwnProperty判断</span></span><br><span class="line"><span class="string">&#x27;guard-for-in&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 采用one true brace style大括号风格</span></span><br><span class="line"><span class="string">&#x27;brace-style&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;1tbs&#x27;</span>, &#123; <span class="string">&#x27;allowSingleLine&#x27;</span>: <span class="literal">true</span> &#125;],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统一逗号周围空格风格</span></span><br><span class="line"><span class="string">&#x27;comma-spacing&#x27;</span>: [<span class="number">2</span>, &#123; <span class="string">&#x27;before&#x27;</span>: <span class="literal">false</span>, <span class="string">&#x27;after&#x27;</span>: <span class="literal">true</span> &#125;],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁止出现多个空行</span></span><br><span class="line"><span class="string">&#x27;no-multiple-empty-lines&#x27;</span>: [<span class="number">2</span>, &#123; <span class="string">&#x27;max&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;maxEOF&#x27;</span>: <span class="number">2</span> &#125;],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许箭头函数不使用圆括号</span></span><br><span class="line"><span class="string">&#x27;arrow-parens&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 规范generator函数的使用</span></span><br><span class="line"><span class="string">&#x27;generator-star-spacing&#x27;</span>: [<span class="number">2</span>, &#123; <span class="string">&#x27;before&#x27;</span>: <span class="literal">false</span>, <span class="string">&#x27;after&#x27;</span>: <span class="literal">true</span> &#125;],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要求在块级</span></span><br><span class="line"><span class="string">&#x27;lines-around-comment&#x27;</span>: [<span class="number">2</span>, &#123; <span class="string">&#x27;beforeBlockComment&#x27;</span>: <span class="literal">true</span>, <span class="string">&#x27;afterBlockComment&#x27;</span>: <span class="literal">false</span>, <span class="string">&#x27;beforeLineComment&#x27;</span>: <span class="literal">true</span>, <span class="string">&#x27;afterLineComment&#x27;</span>: <span class="literal">false</span> &#125;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;off&quot;</span>或者<span class="number">0</span>，不启用这个规则</span><br><span class="line"><span class="string">&quot;warn&quot;</span>或者<span class="number">1</span>，出现问题会有警告</span><br><span class="line"><span class="string">&quot;error&quot;</span>或者<span class="number">2</span>，出现问题会报错</span><br></pre></td></tr></table></figure><p><a href="https://github.com/vuejs/eslint-plugin-vue/blob/master/docs/rules/README.md">https://github.com/vuejs/eslint-plugin-vue/blob/master/docs/rules/README.md</a></p><blockquote><p>注意：“extends”: “plugin:vue/recommended” 会同时检查js和模板的语法错误</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vscode中通过  npm run lint会自动进行eslint的校验和修正</span><br><span class="line">npm run lint --fix</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1vue-cli使用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1vue-cli使用&quot;&gt;&lt;/a&gt; 1.vue-cli使用&lt;/h2&gt;
&lt;p&gt;vue-cli是vue官网提供的一个脚手架，这个构建工具大大降低了webpack的使用难度，支</summary>
      
    
    
    
    <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>vue双向数据绑定</title>
    <link href="http://yoursite.com/2019/03/21/vue%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
    <id>http://yoursite.com/2019/03/21/vue%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</id>
    <published>2019-03-21T04:37:26.000Z</published>
    <updated>2020-03-29T04:41:36.098Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue双向绑定的原理"><a class="markdownIt-Anchor" href="#vue双向绑定的原理"></a> vue双向绑定的原理</h2><h3 id="a-页面数据"><a class="markdownIt-Anchor" href="#a-页面数据"></a> a) 页面–&gt;数据</h3><p>view更新data只需要添加DOM事件监听即可，比如input标签监听 ‘input’ 事件就可以实现</p><h3 id="b-数据页面"><a class="markdownIt-Anchor" href="#b-数据页面"></a> b) 数据–&gt;页面</h3><p>是通过数据劫持 + 发布者-订阅者模式的方式来实现的</p><h4 id="1数据劫持"><a class="markdownIt-Anchor" href="#1数据劫持"></a> (1).数据劫持</h4><p>vue是通过Object.defineProperty()来实现数据劫持的。(vue3.0已换成proxy来实现数据劫持)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(book, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        name = value;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;你取了一个书名叫做&#x27;</span> + value);</span><br><span class="line">    &#125;,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;《&#x27;</span> + name + <span class="string">&#x27;》&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">book.name = <span class="string">&#x27;vue权威指南&#x27;</span>;  <span class="comment">// 你取了一个书名叫做vue权威指南</span></span><br><span class="line">book.name = <span class="string">&#x27;vue权威指南2&#x27;</span>;  <span class="comment">// 你取了一个书名叫做vue权威指南</span></span><br><span class="line"><span class="built_in">console</span>.log(book.name);  <span class="comment">// 《vue权威指南》</span></span><br></pre></td></tr></table></figure><h4 id="2发布者订阅模式"><a class="markdownIt-Anchor" href="#2发布者订阅模式"></a> (2).发布者订阅模式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//订阅器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dept</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.watchers = [];</span><br><span class="line">&#125;</span><br><span class="line">Dept.prototype.addWatcher = <span class="function"><span class="keyword">function</span> (<span class="params">watcher</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.watchers.push(watcher);</span><br><span class="line">&#125;</span><br><span class="line">Dept.prototype.notifyWatcher = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.watchers.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">watcher</span>) </span>&#123;</span><br><span class="line">        watcher.update(value);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//订阅者</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Watcher.prototype.update = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name+<span class="string">&quot;接收到新天气&quot;</span>+value+<span class="string">&quot;，准备干啥&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建几个订阅者</span></span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Watcher(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> xiaohong = <span class="keyword">new</span> Watcher(<span class="string">&quot;小红&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> xiaohei = <span class="keyword">new</span> Watcher(<span class="string">&quot;小黑&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个订阅器</span></span><br><span class="line"><span class="keyword">var</span> dept = <span class="keyword">new</span> Dept();</span><br><span class="line">dept.addWatcher(xiaoming);</span><br><span class="line">dept.addWatcher(xiaohong);</span><br><span class="line">dept.addWatcher(xiaohei);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据劫持常用方案：Object.defineProperty(Vue 2.0)    Proxy(Vue 3.0)</span></span><br><span class="line"><span class="comment">//数据劫持的主要作用：劫持数据的变化</span></span><br><span class="line"><span class="keyword">var</span> weatherStation = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(weatherStation, <span class="string">&quot;weather&quot;</span>, &#123;</span><br><span class="line">    <span class="comment">//当在外部给book的name属性赋值的时候，会执行set</span></span><br><span class="line">    set: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        name = value;</span><br><span class="line">        <span class="comment">//一旦天气变化，订阅器通知所有的观察者去更新</span></span><br><span class="line">        dept.notifyWatcher(value);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//当在外部获取book的name属性的时候，会执行get</span></span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;当前天气是&quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">weatherStation.weather = <span class="string">&quot;晴天&quot;</span>;</span><br><span class="line">weatherStation.weather = <span class="string">&quot;冰雹&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="3数据绑定的实现流程"><a class="markdownIt-Anchor" href="#3数据绑定的实现流程"></a> (3).数据绑定的实现流程</h4><p>首先要对数据进行劫持监听，所以我们需要设置一个监听器Observer，用来监听所有属性。如果属性发上变化了，就需要告诉订阅者Watcher看是否需要更新。</p><p>因为订阅者是有很多个，所以我们需要有一个消息订阅器Dep来专门收集这些订阅者，然后在监听器Observer和订阅者Watcher之间进行统一管理的。</p><p>接着，我们还需要有一个指令解析器Compile，对每个节点元素进行扫描和解析，将相关指令对应初始化成一个订阅者Watcher，并替换模板数据或者绑定相应的函数，此时当订阅者Watcher接收到相应属性的变化，就会执行对应的更新函数，从而更新视图。</p><p>因此接下去我们执行以下3个步骤，实现数据的双向绑定：</p><blockquote><p>1.监听器Observer，用来劫持并监听所有属性，如果有变动的，就通知所有订阅者。</p><p>2.订阅者Watcher，可以收到属性的变化通知并执行相应的函数，从而更新视图。</p><p>3.解析器Compile，可以扫描和解析每个节点的相关指令，并根据初始化模板数据以及初始化相应的订阅者</p></blockquote><p><img src="vue%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/1547815009579.png" alt="1547815009579" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;vue双向绑定的原理&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#vue双向绑定的原理&quot;&gt;&lt;/a&gt; vue双向绑定的原理&lt;/h2&gt;
&lt;h3 id=&quot;a-页面数据&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;</summary>
      
    
    
    
    <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>微信公众号开发</title>
    <link href="http://yoursite.com/2018/06/12/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2018/06/12/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/</id>
    <published>2018-06-12T07:39:44.000Z</published>
    <updated>2020-04-14T07:44:40.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1微信公众号开发"><a class="markdownIt-Anchor" href="#1微信公众号开发"></a> 1.微信公众号开发</h1><h2 id="11-公众号分类"><a class="markdownIt-Anchor" href="#11-公众号分类"></a> 1.1 公众号分类</h2><ul><li>微信公众平台是腾讯旗下的一个平台，微信公众平台中有以下三种<a href="https://www.baidu.com/s?wd=%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao">微信公众号</a>类型：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、订阅号</span><br><span class="line">2、服务号</span><br><span class="line">3、企业号：企业号多半是企业内容使用，用于管理员工通讯，方便员工通讯，信息集合和消息通知等功能，相当与一个移动的小型oa系统了。一般不用来对外宣传推广</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/1570007801353.png" alt="1570007801353" /></p><p><img src="%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/1570007831333.png" alt="1570007831333" /></p><ul><li><p>服务号和订阅号的区别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.出现的位置不同</span><br><span class="line">2.单月发送的消息数量不同，订阅号每天1篇，服务号每月4篇</span><br><span class="line">3.订阅号没有9大接口和支付功能</span><br><span class="line">   9大接口包括：语音识别、客服接口、OAuth 2.0网页授权、生成带参数的二维码、获取用户地理位置、获取用户基本信息、获取关注者列表、用户分组接口、上传和下载多媒体文件</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>微信公众号认证账号和非认证账号的区别：认证账号就是可以在添加好友里根据名字搜索到该账号</p></blockquote></li></ul><h2 id="12-公众号注册"><a class="markdownIt-Anchor" href="#12-公众号注册"></a> 1.2 公众号注册</h2><p><img src="%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/1570007773539.png" alt="1570007773539" /></p><p><img src="%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/1570007910010.png" alt="1570007910010" /></p><h2 id="13-微信公众号基本功能"><a class="markdownIt-Anchor" href="#13-微信公众号基本功能"></a> 1.3 微信公众号基本功能</h2><h3 id="131-自动回复"><a class="markdownIt-Anchor" href="#131-自动回复"></a> 1.3.1 自动回复</h3><p><a href="https://kf.qq.com/faq/161221FZnEfe161221Ibmamq.html">https://kf.qq.com/faq/161221FZnEfe161221Ibmamq.html</a></p><p><img src="%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/1570008312002.png" alt="1570008312002" /></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">收到消息回复在一小时内只能回复一到两条，所有有必要设置关键词回复</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="132-自定义菜单"><a class="markdownIt-Anchor" href="#132-自定义菜单"></a> 1.3.2 自定义菜单</h3><p><a href="http://classic.getemoji.com/">http://classic.getemoji.com/</a> 可以在这个网址中选择对应的图标，给菜单的名字添加图标</p><p><img src="%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/1570009469509.png" alt="1570009469509" /></p><p><img src="%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/1570009558069.png" alt="1570009558069" /></p><p><img src="%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/1570009718993.png" alt="1570009718993" /></p><p><img src="%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/1570009813005.png" alt="1570009813005" /></p><h3 id="133-投票管理"><a class="markdownIt-Anchor" href="#133-投票管理"></a> 1.3.3 投票管理</h3><p><img src="%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/1576461102561.png" alt="1576461102561" /></p><p>投票管理需要插入到对应的文章后才能生效</p><h3 id="134-页面模板使用"><a class="markdownIt-Anchor" href="#134-页面模板使用"></a> 1.3.4 页面模板使用</h3><h4 id="a-添加页面模板"><a class="markdownIt-Anchor" href="#a-添加页面模板"></a> a) 添加页面模板</h4><p><img src="%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/1576463387072.png" alt="1576463387072" /></p><h4 id="b-绑定页面模板"><a class="markdownIt-Anchor" href="#b-绑定页面模板"></a> b) 绑定页面模板</h4><p><img src="%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/1576463332280.png" alt="1576463332280" /></p><h3 id="14-公众号后台开发"><a class="markdownIt-Anchor" href="#14-公众号后台开发"></a> 1.4 公众号后台开发</h3><p>除了使用上面所提到的直接在微信公众号后台配置的基本功能之外，微信公众号还允许我们接入后台程序。需要注意的是，一旦后台接入之后，之前的配置会自动失效。</p><h4 id="141-后台接入"><a class="markdownIt-Anchor" href="#141-后台接入"></a> 1.4.1 后台接入</h4><p><strong>a) 微信公众号后台配置</strong></p><p><img src="%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/1576470117197.png" alt="1576470117197" /></p><p><strong>b) node后台</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> parseString = <span class="built_in">require</span>(<span class="string">&#x27;xml2js&#x27;</span>).parseString;<span class="comment">//引入xml2js包</span></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sha1 = <span class="built_in">require</span>(<span class="string">&#x27;sha1&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    appID: <span class="string">&#x27;wx16b01d87eca9d8f4&#x27;</span>, <span class="comment">//公众号里面取</span></span><br><span class="line">    AppSecret: <span class="string">&#x27;41458d7494fe25ed6d957a7632d72cfa&#x27;</span>, <span class="comment">//公众号里面取</span></span><br><span class="line">    token: <span class="string">&#x27;mytoken1234&#x27;</span> <span class="comment">//自定义的token</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.method)</span><br><span class="line">    <span class="keyword">if</span> (req.method == <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> signature = req.query.signature,</span><br><span class="line">            timestamp = req.query.timestamp,</span><br><span class="line">            nonce = req.query.nonce,</span><br><span class="line">            echostr = req.query.echostr;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// token、timestamp、nonce三个参数进行字典序排序</span></span><br><span class="line">        <span class="keyword">var</span> arr = [config.token, timestamp, nonce].sort().join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="comment">// sha1加密    </span></span><br><span class="line">        <span class="keyword">var</span> result = sha1(arr);</span><br><span class="line">        <span class="built_in">console</span>.log(result, signature)</span><br><span class="line">        <span class="keyword">if</span> (result === signature) &#123;</span><br><span class="line">            res.send(echostr);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.send(<span class="string">&#x27;mismatch&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        next()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;running....&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>c) 将node后台端口通过ngrok映射到外网</strong></p><p><img src="%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/1576470280500.png" alt="1576470280500" /></p><p><strong>d) 后台接入流程</strong></p><p><img src="%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/1576470380003.png" alt="1576470380003" /></p><h4 id="142-回复消息"><a class="markdownIt-Anchor" href="#142-回复消息"></a> 1.4.2 回复消息</h4><p><a href="https://developers.weixin.qq.com/doc/offiaccount/Message_Management/Passive_user_reply_message.html">https://developers.weixin.qq.com/doc/offiaccount/Message_Management/Passive_user_reply_message.html</a></p><blockquote><p>公众号的接口权限可在后台查询，微信公众号在定义客户端和服务端交互的时候，使用的数据格式是xml。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;xml&gt;</span><br><span class="line">  &lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;&#x2F;ToUserName&gt;</span><br><span class="line">  &lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;&#x2F;FromUserName&gt;</span><br><span class="line">  &lt;CreateTime&gt;12345678&lt;&#x2F;CreateTime&gt;</span><br><span class="line">  &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;&#x2F;MsgType&gt;</span><br><span class="line">  &lt;Content&gt;&lt;![CDATA[你好]]&gt;&lt;&#x2F;Content&gt;</span><br><span class="line">&lt;&#x2F;xml&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理微信post消息请求 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.post(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> buffer = [];</span><br><span class="line">        <span class="comment">//监听 data 事件 用于接收数据</span></span><br><span class="line">        req.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            buffer.push(data);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//监听 end 事件 用于处理接收完成的数据</span></span><br><span class="line">        req.on(<span class="string">&#x27;end&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//输出接收完成的数据</span></span><br><span class="line">            parseString(Buffer.concat(buffer).toString(<span class="string">&#x27;utf-8&#x27;</span>), &#123; <span class="attr">explicitArray</span>: <span class="literal">false</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    <span class="comment">//打印错误信息</span></span><br><span class="line">                    <span class="built_in">console</span>.log(err);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//打印解析结果</span></span><br><span class="line">                    <span class="built_in">console</span>.log(result);</span><br><span class="line">                    result = result.xml;</span><br><span class="line">                    <span class="keyword">var</span> toUser = result.ToUserName; <span class="comment">//接收方微信</span></span><br><span class="line">                    <span class="keyword">var</span> fromUser = result.FromUserName;<span class="comment">//发送仿微信</span></span><br><span class="line">                    <span class="keyword">if</span> (result.Event === <span class="string">&#x27;subscribe&#x27;</span>) &#123;</span><br><span class="line">                        <span class="comment">//回复消息</span></span><br><span class="line">                        <span class="keyword">var</span> xml = returntext(fromUser, toUser, <span class="string">&#x27;欢迎关注公众号,hahhh&#x27;</span>);</span><br><span class="line">                        <span class="built_in">console</span>.log(xml)</span><br><span class="line">                        res.send(xml)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">var</span> xml = returntext(fromUser, toUser, <span class="string">&#x27;您好&#x27;</span>);</span><br><span class="line">                        <span class="built_in">console</span>.log(xml)</span><br><span class="line">                        res.send(xml)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//回复文本消息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returntext</span>(<span class="params">toUser, fromUser, content</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xmlContent = <span class="string">&quot;&lt;xml&gt;&lt;ToUserName&gt;&lt;![CDATA[&quot;</span> + toUser + <span class="string">&quot;]]&gt;&lt;/ToUserName&gt;&quot;</span>;</span><br><span class="line">    xmlContent += <span class="string">&quot;&lt;FromUserName&gt;&lt;![CDATA[&quot;</span> + fromUser + <span class="string">&quot;]]&gt;&lt;/FromUserName&gt;&quot;</span>;</span><br><span class="line">    xmlContent += <span class="string">&quot;&lt;CreateTime&gt;&quot;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() + <span class="string">&quot;&lt;/CreateTime&gt;&quot;</span>;</span><br><span class="line">    xmlContent += <span class="string">&quot;&lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;&quot;</span>;</span><br><span class="line">    xmlContent += <span class="string">&quot;&lt;Content&gt;&lt;![CDATA[&quot;</span> + content + <span class="string">&quot;]]&gt;&lt;/Content&gt;&lt;/xml&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> xmlContent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="143-重新开启自定义菜单"><a class="markdownIt-Anchor" href="#143-重新开启自定义菜单"></a> 1.4.3 重新开启自定义菜单</h4><p>当接入公众号后台之后，原来的自定义菜单、回复等功能会失效。如果想自定义菜单和公众号后台同时生效，我们可以在添加功能插件–&gt;自定义菜单中开启。</p><p><img src="%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/1576469739930.png" alt="1576469739930" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1微信公众号开发&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1微信公众号开发&quot;&gt;&lt;/a&gt; 1.微信公众号开发&lt;/h1&gt;
&lt;h2 id=&quot;11-公众号分类&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#11</summary>
      
    
    
    
    <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>函数原型</title>
    <link href="http://yoursite.com/2018/02/14/%E5%87%BD%E6%95%B0%E5%8E%9F%E5%9E%8B/"/>
    <id>http://yoursite.com/2018/02/14/%E5%87%BD%E6%95%B0%E5%8E%9F%E5%9E%8B/</id>
    <published>2018-02-14T08:04:59.000Z</published>
    <updated>2020-04-14T08:08:10.289Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-函数声明的实质"><a class="markdownIt-Anchor" href="#一-函数声明的实质"></a> 一、函数声明的实质</h2><p>我们平时大量使用Function，但是真的懂Function吗？</p><p>声明一个函数的时所使用的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function fn(num1,num2)&#123;</span><br><span class="line">    return num1+num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实它的实质是使用了Function的构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Function(参数1，参数2，...，函数体);</span><br><span class="line">var fn &#x3D; new Function(&#39;num1&#39;,&#39;num2&#39;,&#39;return num1+num2&#39;);</span><br></pre></td></tr></table></figure><p>这两种声明方式是等同的，但从第二种写法上，我们可以很清晰的看出fn函数是由Function构造出来的。</p><h2 id="二-javascript对象"><a class="markdownIt-Anchor" href="#二-javascript对象"></a> 二、JavaScript对象</h2><p>我们先来看一个例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(typeof Object);</span><br><span class="line">console.log(typeof Function);</span><br></pre></td></tr></table></figure><p>打印结果都是Function，这是为什么了，为什么Object也是Function？</p><p>那是因为<strong>JS中所有的函数都是Function的实例</strong>，Object也是由构造函数构建的，那么Object的类型也是Function。</p><p>值得注意的是：**Function自身能够生成自身，即Function的原型就是Function。**即</p><p>我们用一张图来解释这其中的关系</p><p><img src="%E5%87%BD%E6%95%B0%E5%8E%9F%E5%9E%8B/yuan1.png" alt="函数原型" /></p><p>结合上一章所介绍的原型链，综合给出一张关系图</p><p><img src="%E5%87%BD%E6%95%B0%E5%8E%9F%E5%9E%8B/yuan2.png" alt="原型链加函数原型" /></p><p>[声明]：本篇文章中部分引用 <a href="https://blog.csdn.net/swl979623074/article/details/78836767">从Function说原型</a> 的文章。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一-函数声明的实质&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一-函数声明的实质&quot;&gt;&lt;/a&gt; 一、函数声明的实质&lt;/h2&gt;
&lt;p&gt;我们平时大量使用Function，但是真的懂Function吗？&lt;/p&gt;
&lt;p&gt;声明一个函数的时所使用</summary>
      
    
    
    
    <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
  </entry>
  
</feed>
